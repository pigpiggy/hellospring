<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:jdbc="http://www.springframework.org/schema/jdbc"
  xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
  xsi:schemaLocation="http://www.springframework.org/schema/jdbc 
    http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://mybatis.org/schema/mybatis-spring 
    http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context.xsd">
  
  <context:annotation-config />

  <context:component-scan base-package="com.javaex">
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
    <context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
  </context:component-scan>



<!-- 아래 세 개는 세트로 -->
  <!-- oracle datasource -->
  <bean id="oracleDatasource" class="oracle.jdbc.pool.OracleDataSource" destroy-method="close">
    <property name="URL" value="jdbc:oracle:thin:@localhost:1521:xe" />
    <property name="user" value="webdb" />
    <property name="password" value="1234" />
    <property name="connectionCachingEnabled" value="true" />
    <qualifier value="main-db" />
  </bean>

  <!-- MyBatis SqlSessionFactoryBean -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="oracleDatasource" />
    <property name="configLocation" value="classpath:mybatis/configuration.xml" />
  </bean>

  <!-- MyBatis SqlSessionTemplate -->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg index="0" ref="sqlSessionFactory" />
  </bean>
  
<!-- Quartz 테스트 설정 -->
  <!-- 테스트용 잡  -->
  <bean id="testJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
    <!-- 서비스 구현 객체의 빈 이름을 인자로 줍니다. -->
    <property name="targetObject" ref="myService" />
    <!-- 서비스 객체에서 주기적으로 실행될 메소드를 지정합니다. -->
    <property name="targetMethod" value="testJobMethod" />
    <!-- 동시 실행을 방지합니다. -->
    <property name="concurrent" value="false" />
  </bean>
  
  <!-- 테스트용  트리거-->
  <bean id="testJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
    <property name="jobDetail" ref="testJob" />
    <!-- CronTrigger를 사용하여 2분 간격으로 실행되도록 지정했습니다. -->
    <property name="cronExpression" value="0 0/2 * * * ?" />
  </bean>
  
  <!-- 테스트용 스케줄러 -->
  <bean id="testJobScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
    <property name="triggers">
      <!-- 앞에서 설정한 트리거를 등록합니다. 필요하면 여러개 만들어서 등록하면 됩니다. -->
      <list><ref bean="testJobTrigger" /></list>
    </property>
  </bean>
  



</beans>
